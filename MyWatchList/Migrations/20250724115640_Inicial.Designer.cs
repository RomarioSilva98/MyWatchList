// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyWatchList.Data;

#nullable disable

namespace MyWatchList.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250724115640_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("Nota")
                        .HasColumnType("int");

                    b.Property<int>("ObraId")
                        .HasColumnType("int");

                    b.Property<string>("Progresso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ObraId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("ListaPersonalizada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ListaPersonalizada");
                });

            modelBuilder.Entity("MyWatchList.Models.Ator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Atores");
                });

            modelBuilder.Entity("MyWatchList.Models.Episodio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("TemporadaId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TemporadaId");

                    b.ToTable("Episodios");
                });

            modelBuilder.Entity("MyWatchList.Models.ListaObra", b =>
                {
                    b.Property<int>("ListaId")
                        .HasColumnType("int");

                    b.Property<int>("ObraId")
                        .HasColumnType("int");

                    b.HasKey("ListaId", "ObraId");

                    b.HasIndex("ObraId");

                    b.ToTable("ListaObras");
                });

            modelBuilder.Entity("MyWatchList.Models.Obra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fotos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("NotaMedia")
                        .HasColumnType("real");

                    b.Property<int>("PopularidadeAno")
                        .HasColumnType("int");

                    b.Property<int>("PopularidadeDia")
                        .HasColumnType("int");

                    b.Property<int>("PopularidadeMes")
                        .HasColumnType("int");

                    b.Property<int>("PopularidadeSemana")
                        .HasColumnType("int");

                    b.Property<string>("Sinopse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoObra")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Videos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Obras");

                    b.HasDiscriminator<string>("TipoObra").HasValue("Obra");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyWatchList.Models.ObraAtor", b =>
                {
                    b.Property<int>("ObraId")
                        .HasColumnType("int");

                    b.Property<int>("AtorId")
                        .HasColumnType("int");

                    b.HasKey("ObraId", "AtorId");

                    b.HasIndex("AtorId");

                    b.ToTable("ObraAtores");
                });

            modelBuilder.Entity("MyWatchList.Models.Temporada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnimeId")
                        .HasColumnType("int");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int>("ObraId")
                        .HasColumnType("int");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.HasIndex("ObraId");

                    b.HasIndex("SerieId");

                    b.ToTable("Temporadas");
                });

            modelBuilder.Entity("MyWatchList.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoPerfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("UsuarioObraAssistida", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("ObraId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "ObraId");

                    b.HasIndex("ObraId");

                    b.ToTable("UsuarioObrasAssistidas");
                });

            modelBuilder.Entity("UsuarioObraWatchlist", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("ObraId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "ObraId");

                    b.HasIndex("ObraId");

                    b.ToTable("UsuarioObrasWatchlist");
                });

            modelBuilder.Entity("MyWatchList.Models.Anime", b =>
                {
                    b.HasBaseType("MyWatchList.Models.Obra");

                    b.HasDiscriminator().HasValue("Anime");
                });

            modelBuilder.Entity("MyWatchList.Models.Filme", b =>
                {
                    b.HasBaseType("MyWatchList.Models.Obra");

                    b.HasDiscriminator().HasValue("Filme");
                });

            modelBuilder.Entity("MyWatchList.Models.Serie", b =>
                {
                    b.HasBaseType("MyWatchList.Models.Obra");

                    b.HasDiscriminator().HasValue("Serie");
                });

            modelBuilder.Entity("Comentario", b =>
                {
                    b.HasOne("MyWatchList.Models.Obra", "Obra")
                        .WithMany("Comentarios")
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obra");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ListaPersonalizada", b =>
                {
                    b.HasOne("MyWatchList.Models.Usuario", "Usuario")
                        .WithMany("Listas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MyWatchList.Models.Episodio", b =>
                {
                    b.HasOne("MyWatchList.Models.Temporada", "Temporada")
                        .WithMany("Episodios")
                        .HasForeignKey("TemporadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("MyWatchList.Models.ListaObra", b =>
                {
                    b.HasOne("ListaPersonalizada", "Lista")
                        .WithMany("Obras")
                        .HasForeignKey("ListaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.Obra", "Obra")
                        .WithMany()
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lista");

                    b.Navigation("Obra");
                });

            modelBuilder.Entity("MyWatchList.Models.ObraAtor", b =>
                {
                    b.HasOne("MyWatchList.Models.Ator", "Ator")
                        .WithMany("Obras")
                        .HasForeignKey("AtorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.Obra", "Obra")
                        .WithMany("Elenco")
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ator");

                    b.Navigation("Obra");
                });

            modelBuilder.Entity("MyWatchList.Models.Temporada", b =>
                {
                    b.HasOne("MyWatchList.Models.Anime", null)
                        .WithMany("Temporadas")
                        .HasForeignKey("AnimeId");

                    b.HasOne("MyWatchList.Models.Obra", "Obra")
                        .WithMany()
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.Serie", null)
                        .WithMany("Temporadas")
                        .HasForeignKey("SerieId");

                    b.Navigation("Obra");
                });

            modelBuilder.Entity("UsuarioObraAssistida", b =>
                {
                    b.HasOne("MyWatchList.Models.Obra", "Obra")
                        .WithMany()
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.Usuario", "Usuario")
                        .WithMany("Assistidas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obra");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("UsuarioObraWatchlist", b =>
                {
                    b.HasOne("MyWatchList.Models.Obra", "Obra")
                        .WithMany()
                        .HasForeignKey("ObraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.Usuario", "Usuario")
                        .WithMany("Watchlist")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Obra");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ListaPersonalizada", b =>
                {
                    b.Navigation("Obras");
                });

            modelBuilder.Entity("MyWatchList.Models.Ator", b =>
                {
                    b.Navigation("Obras");
                });

            modelBuilder.Entity("MyWatchList.Models.Obra", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Elenco");
                });

            modelBuilder.Entity("MyWatchList.Models.Temporada", b =>
                {
                    b.Navigation("Episodios");
                });

            modelBuilder.Entity("MyWatchList.Models.Usuario", b =>
                {
                    b.Navigation("Assistidas");

                    b.Navigation("Comentarios");

                    b.Navigation("Listas");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("MyWatchList.Models.Anime", b =>
                {
                    b.Navigation("Temporadas");
                });

            modelBuilder.Entity("MyWatchList.Models.Serie", b =>
                {
                    b.Navigation("Temporadas");
                });
#pragma warning restore 612, 618
        }
    }
}
